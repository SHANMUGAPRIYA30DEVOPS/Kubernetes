vi pod-definition.yaml
-----------------------

apiVersion: v1
kind: Pod
metadata:
  name: nginxPod
  labels:
    app: nginx
    tier: frontend
spec:
  containers:
  - name: nginxCon
    image: nginx
  - name: busyboxCon
    image: busybox
    
----
kubectl apply -f pod-definition.yaml
kubectl get pods
kubectl describe pod <pod_name>
kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml

----


vi rc-definition.yaml
----------------------

apiVersion: v1
kind: ReplicationController
metadata:
  name: myapp-rc
  labels:
    app: my-app
    type: frontend
spec:
  replicas: 3
  template:
    metadata:
      name: myapp-pod
      labels:
        app: my-app
        type: frontend
    spec:
      containers:
      - name: c1
        image: nginx
      - name: c2
        image: busybox
     
-----------
kubectl get replicationcontroller
kubectl get rc
-----------


vi replicaset-definition.yaml
------------------------------

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-rs
  labels:
    app: my-app
    type: frontend
spec: 
  replicas: 3
  selector:
    matchLabels:
      type: frontend
  template:
    metadata:
      name: myapp-pod
      labels:
        app: my-app
        type: frontend
    spec:
      containers:
      - name: c1
        image: nginx
        
        
--------------
kubectl apply -f replicaset-definition.yaml
kubectl get replicaset
kubectl get rs
kubectl delete replicaset myapp-rs

To Scale
kubectl replace -f replicaset-definition.yaml
kubectl scale --replicas=6 -f replicaset-definition.yaml
kubectl scale --replicas=6 replicaset myapp-rs

     
---------------------
vi serviceNodePort-definition.yaml

apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: NodePort
  selector:
    app: nginx
    tier: frontend
  ports:
  - targetPort: 80
    port: 8080
    nodePort: 30008
    
 kubectl get svc
 kubectl get services
 
 ----------------------
 
 vi serviceClusterIP-definition.yaml
 
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: ClusterIP
  selector: 
    app: nginx
  ports:
  - targetPort :80
    port: 8080
-------------------------



vi taint-tolerations.yaml


apiVersion: v1
kind: Pod
metadata:
  name:mypod
  labels:
    app: myapp
    env: prod
spec:
  containers:
  - name: nginxCon
    image: nginxCon
    ports:
    - containerPort: 80
  tolerations:
  - key: "app"
    operator: "Equal"
    value: "blue"
    effect: "NoSchedule"
    
    
kubectl taint nodes <nodename> app=blue:NoSchedule




--------------------------------

vi nodeSelector.yaml

apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: myCon
    image: nginx
  nodeSelector:
    size: large
    
    
kubectl get nodes --show-labels
kubectl label nodes <nodename> size=large



-----------------------------


vi DaemonSets-definition.yaml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: myappdaemonset
spec:
  selector:
    matchLabels:
      app: myapp
      tier: backend
  template:
    matadata:
      labels:
        app: myapp
        tier: backend
    spec:
      containers:
      - name: myappcon
        image: nginx
